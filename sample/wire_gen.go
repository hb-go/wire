// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package sample

import (
	"errors"
	"fmt"
	"time"
)

// Injectors from wire.go:

func InitializeEvent(phrase string) (Event, error) {
	message, err := NewMessage(phrase)
	if err != nil {
		return Event{}, err
	}
	greeter := NewGreeter(message)
	event, err := NewEvent(greeter)
	if err != nil {
		return Event{}, err
	}
	return event, nil
}

// wire.go:

func NewEventNumber() int {
	return 1
}

type Message string

type Greeter struct {
	// ... TBD
	Message Message // <- adding a Message field
	Grumpy  bool
}

type Event struct {
	// ... TBD
	Greeter Greeter // <- adding a Greeter field\
}

func NewMessage(phrase string) (Message, error) {
	if len(phrase) <= 0 {
		return "", errors.New("could not create message: phrase length must > 0")
	}
	return Message(phrase), nil
}

func NewGreeter(m Message) Greeter {
	var grumpy bool
	if time.Now().Unix()%2 == 0 {
		grumpy = true
	}
	return Greeter{Message: m, Grumpy: grumpy}
}

func (g Greeter) Greet() Message {
	if g.Grumpy {
		return Message("Go away!")
	}
	return g.Message
}

func NewEvent(g Greeter) (Event, error) {
	if g.Grumpy {
		return Event{}, errors.New("could not create event: event greeter is grumpy")
	}
	return Event{Greeter: g}, nil
}

func (e Event) Start() {
	msg := e.Greeter.Greet()
	fmt.Println(msg)
}
